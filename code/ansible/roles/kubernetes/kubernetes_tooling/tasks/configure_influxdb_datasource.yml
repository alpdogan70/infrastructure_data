---
# File: tasks/configure_influxdb_datasource.yml (VERSION AUTOMATIS√âE - FIXED)

# First, gather facts from the InfluxDB host
- name: Gather facts from InfluxDB host
  setup:
  delegate_to: "{{ groups['meta-app_influxdb'][0] }}"
  delegate_facts: true
  when: groups['meta-app_influxdb'] is defined and groups['meta-app_influxdb'] | length > 0

- name: Auto-detect InfluxDB IP from inventory
  set_fact:
    kubernetes_influxdb_host: "{{ hostvars[groups['meta-app_influxdb'][0]]['ansible_default_ipv4']['address'] }}"
    kubernetes_influxdb_port: 8086
  when: 
    - groups['meta-app_influxdb'] is defined 
    - groups['meta-app_influxdb'] | length > 0
    - hostvars[groups['meta-app_influxdb'][0]]['ansible_default_ipv4'] is defined

- name: Fallback - Use inventory hostname/IP if facts unavailable
  set_fact:
    kubernetes_influxdb_host: "{{ hostvars[groups['meta-app_influxdb'][0]]['ansible_host'] | default(groups['meta-app_influxdb'][0]) }}"
    kubernetes_influxdb_port: 8086
  when: 
    - kubernetes_influxdb_host is not defined
    - groups['meta-app_influxdb'] is defined 
    - groups['meta-app_influxdb'] | length > 0

- name: Final fallback - Use known IP if all else fails
  set_fact:
    kubernetes_influxdb_host: "10.0.1.227"  # IP r√©elle d√©tect√©e
    kubernetes_influxdb_port: 8086
  when: kubernetes_influxdb_host is not defined

- name: Display detected InfluxDB configuration
  debug:
    msg: |
      üîç InfluxDB Auto-Detection:
      - Host: {{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}
      - Detection: {% if groups['meta-app_influxdb'] is defined %}Auto from inventory{% else %}Fallback IP{% endif %}
      - Group: {{ groups['meta-app_influxdb'] | default('Not found') }}

- name: Get InfluxDB token from remote server
  slurp:
    src: /etc/influxdb2/admin-token
  register: remote_influxdb_token
  delegate_to: "{{ groups['meta-app_influxdb'][0] }}"
  become: true
  when: groups['meta-app_influxdb'] is defined and groups['meta-app_influxdb'] | length > 0

- name: Set InfluxDB configuration variables
  set_fact:
    kubernetes_influxdb_token: "{{ remote_influxdb_token.content | b64decode | trim }}"
    kubernetes_influxdb_org: "{{ influxdb_org | default('iot') }}"
    kubernetes_influxdb_bucket: "{{ influxdb_bucket | default('sensors') }}"
    kubernetes_influxdb_admin_user: "{{ influxdb_admin_user | default('admin') }}"
  when: remote_influxdb_token is defined and remote_influxdb_token.content is defined

- name: Test InfluxDB connectivity from Kubernetes
  uri:
    url: "http://{{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}/health"
    method: GET
    timeout: 30
  register: influxdb_health_check
  failed_when: false

- name: Display InfluxDB connection info
  debug:
    msg: |
      üìä InfluxDB Connection Test:
      - Host: {{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}
      - Organization: {{ kubernetes_influxdb_org }}
      - Default Bucket: {{ kubernetes_influxdb_bucket }}
      - Token: {{ kubernetes_influxdb_token[:20] if kubernetes_influxdb_token is defined else 'NOT RETRIEVED' }}...
      - Health Check: {{ 'OK ‚úÖ' if influxdb_health_check.status == 200 else 'FAILED ‚ùå' }}
      {% if influxdb_health_check.status == 200 %}
      - Response: {{ influxdb_health_check.json.message }}
      - Version: {{ influxdb_health_check.json.version | default('Unknown') }}
      {% else %}
      - Error: {{ influxdb_health_check.msg | default('Connection timeout') }}
      - Status Code: {{ influxdb_health_check.status | default('No response') }}
      {% endif %}

- name: Configure InfluxDB datasource in Grafana
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: grafana-datasource-influxdb
        namespace: monitoring
        labels:
          apps: prometheus-operator-grafana
          grafana_datasource: "1"
      data:
        influxdb-datasource.yml: |
          apiVersion: 1
          datasources:
            - name: InfluxDB_IoT
              type: influxdb
              access: proxy
              url: http://{{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}
              database: "{{ kubernetes_influxdb_org }}"
              user: "{{ kubernetes_influxdb_admin_user }}"
              secureJsonData:
                token: "{{ kubernetes_influxdb_token }}"
              jsonData:
                version: Flux
                organization: "{{ kubernetes_influxdb_org }}"
                defaultBucket: "{{ kubernetes_influxdb_bucket }}"
                tlsSkipVerify: true
                httpMode: POST
              isDefault: false
              editable: true
            
            - name: InfluxDB_Solar
              type: influxdb
              access: proxy
              url: http://{{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}
              database: "{{ kubernetes_influxdb_org }}"
              user: "{{ kubernetes_influxdb_admin_user }}"
              secureJsonData:
                token: "{{ kubernetes_influxdb_token }}"
              jsonData:
                version: Flux
                organization: "{{ kubernetes_influxdb_org }}"
                defaultBucket: "solar_panels"
                tlsSkipVerify: true
                httpMode: POST
              isDefault: false
              editable: true

            - name: InfluxDB_Battery
              type: influxdb
              access: proxy
              url: http://{{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}
              database: "{{ kubernetes_influxdb_org }}"
              user: "{{ kubernetes_influxdb_admin_user }}"
              secureJsonData:
                token: "{{ kubernetes_influxdb_token }}"
              jsonData:
                version: Flux
                organization: "{{ kubernetes_influxdb_org }}"
                defaultBucket: "batteries"
                tlsSkipVerify: true
                httpMode: POST
              isDefault: false
              editable: true

            - name: InfluxDB_Energy
              type: influxdb
              access: proxy
              url: http://{{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}
              database: "{{ kubernetes_influxdb_org }}"
              user: "{{ kubernetes_influxdb_admin_user }}"
              secureJsonData:
                token: "{{ kubernetes_influxdb_token }}"
              jsonData:
                version: Flux
                organization: "{{ kubernetes_influxdb_org }}"
                defaultBucket: "energy_consumption"
                tlsSkipVerify: true
                httpMode: POST
              isDefault: false
              editable: true
            
            - name: InfluxDB_BMC
              type: influxdb
              access: proxy
              url: http://{{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}
              database: "{{ kubernetes_influxdb_org }}"
              user: "{{ kubernetes_influxdb_admin_user }}"
              secureJsonData:
                token: "{{ kubernetes_influxdb_token }}"
              jsonData:
                version: Flux
                organization: "{{ kubernetes_influxdb_org }}"
                defaultBucket: "bmc_servers"
                tlsSkipVerify: true
                httpMode: POST
              isDefault: false
              editable: true

            - name: InfluxDB_Energy_AI
              type: influxdb
              access: proxy
              url: http://{{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}
              database: "{{ kubernetes_influxdb_org }}"
              user: "{{ kubernetes_influxdb_admin_user }}"
              secureJsonData:
                token: "{{ kubernetes_influxdb_token }}"
              jsonData:
                version: Flux
                organization: "{{ kubernetes_influxdb_org }}"
                defaultBucket: "energy_ai"
                tlsSkipVerify: true
                httpMode: POST
              isDefault: false
              editable: true
  when: 
    - influxdb_health_check.status == 200
    - kubernetes_influxdb_token is defined


- name: Wait for Grafana to reload datasources
  pause:
    seconds: 30
  when: 
    - influxdb_health_check.status == 200
    - kubernetes_influxdb_token is defined

- name: Display deployment success
  debug:
    msg: |
      ‚úÖ InfluxDB Integration Completed Successfully!
      
      üìä Auto-Configured Datasources:
      - InfluxDB_IoT: {{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }} (bucket: sensors)
      - InfluxDB_Solar: {{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }} (bucket: solar_panels)
      - InfluxDB_Battery: {{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }} (bucket: batteries)
      - InfluxDB_Energy: {{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }} (bucket: energy_consumption)
      
      üìã Dashboard Created:
      - IoT Auto Config: http://gx.tanerinfo.eu/d/iot-auto
      
      üîó Grafana Access:
      - Main URL: http://gx.tanerinfo.eu
      - Configuration ‚Üí Data sources to verify InfluxDB connections
      - Dashboards to see the new IoT dashboard
      
      üöÄ Your IoT monitoring with auto-IP detection is ready!
  when: 
    - influxdb_health_check.status == 200
    - kubernetes_influxdb_token is defined

- name: Display connection failure message
  debug:
    msg: |
      ‚ùå InfluxDB Connection Failed
      
      üîç Auto-Detection Results:
      - Detected Host: {{ kubernetes_influxdb_host | default('FAILED TO DETECT') }}:{{ kubernetes_influxdb_port | default('8086') }}
      - Status Code: {{ influxdb_health_check.status | default('No response') }}
      - Error: {{ influxdb_health_check.msg | default('Connection timeout or network error') }}
      
      üí° Troubleshooting:
      1. Verify InfluxDB is running: sudo systemctl status influxdb
      2. Test direct connectivity: kubectl run test --rm -i --tty --image=curlimages/curl -- curl http://{{ kubernetes_influxdb_host }}:{{ kubernetes_influxdb_port }}/health
      3. Check inventory group 'meta-app_influxdb' exists and is accessible
      4. Verify the host in meta-app_influxdb group is reachable
      
      üîß Manual override available: Set kubernetes_influxdb_host manually if auto-detection fails
  when: influxdb_health_check.status != 200 or kubernetes_influxdb_token is not defined