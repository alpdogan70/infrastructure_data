#!/bin/bash
# Energy AI Management Script
# File: /usr/local/bin/manage_energy_ai
# Generated by Ansible - Energy Intelligence Role

set -euo pipefail

# Configuration
ENERGY_AI_BASE="{{ energy_ai_paths.base | default('/opt/energy-ai') }}"
VENV_PATH="{{ python_ai.venv_path | default('/opt/energy-ai/venv') }}"
LOG_PATH="{{ energy_ai_paths.logs | default('/opt/energy-ai/logs') }}"

# Services
SERVICES=(
    "energy-ai-predictor"
    "energy-scenarios"
    "weather-ml"
    "cost-optimizer"
)

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${{ '{' }}BLUE{{ '}' }}[INFO]${{ '{' }}NC{{ '}' }} $1"
}

log_success() {
    echo -e "${{ '{' }}GREEN{{ '}' }}[SUCCESS]${{ '{' }}NC{{ '}' }} $1"
}

log_warning() {
    echo -e "${{ '{' }}YELLOW{{ '}' }}[WARNING]${{ '{' }}NC{{ '}' }} $1"
}

log_error() {
    echo -e "${{ '{' }}RED{{ '}' }}[ERROR]${{ '{' }}NC{{ '}' }} $1"
}

show_header() {
    echo -e "${{ '{' }}BLUE{{ '}' }}=================================================${{ '{' }}NC{{ '}' }}"
    echo -e "${{ '{' }}BLUE{{ '}' }}🧠 ENERGY AI MANAGEMENT TOOL${{ '{' }}NC{{ '}' }}"
    echo -e "${{ '{' }}BLUE{{ '}' }}Version: {{ energy_ai.version | default('1.0.0') }}${{ '{' }}NC{{ '}' }}"
    echo -e "${{ '{' }}BLUE{{ '}' }}Environment: {{ energy_ai.environment | default('production') }}${{ '{' }}NC{{ '}' }}"
    echo -e "${{ '{' }}BLUE{{ '}' }}=================================================${{ '{' }}NC{{ '}' }}"
    echo
}

show_usage() {
    echo "Usage: $0 [COMMAND]"
    echo
    echo "Commands:"
    echo "  status      - Show services status"
    echo "  start       - Start all services"
    echo "  stop        - Stop all services"
    echo "  restart     - Restart all services"
    echo "  logs        - Show recent logs"
    echo "  health      - Run health check"
    echo "  init        - Initialize AI system"
    echo "  train       - Train ML models"
    echo "  diagnose    - Run diagnostics"
    echo "  monitor     - Show performance monitor"
    echo "  collect     - Collect data"
    echo "  backup      - Backup system"
    echo "  help        - Show this help"
    echo
}

check_prerequisites() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        exit 1
    fi
    
    if [[ ! -d "$ENERGY_AI_BASE" ]]; then
        log_error "Energy AI base directory not found: $ENERGY_AI_BASE"
        exit 1
    fi
    
    if [[ ! -d "$VENV_PATH" ]]; then
        log_error "Python virtual environment not found: $VENV_PATH"
        exit 1
    fi
}

service_status() {
    log_info "Checking Energy AI services status..."
    echo
    
    local all_active=true
    
    for service in "${{ '{' }}SERVICES[@]{{ '}' }}"; do
        if systemctl is-active --quiet "$service"; then
            log_success "$service: Active"
        else
            log_error "$service: Inactive"
            all_active=false
        fi
    done
    
    echo
    if $all_active; then
        log_success "All Energy AI services are running"
    else
        log_warning "Some services are not running"
    fi
}

service_start() {
    log_info "Starting Energy AI services..."
    
    for service in "${{ '{' }}SERVICES[@]{{ '}' }}"; do
        log_info "Starting $service..."
        if systemctl start "$service"; then
            log_success "$service started"
        else
            log_error "Failed to start $service"
        fi
    done
    
    log_info "Enabling services for auto-start..."
    for service in "${{ '{' }}SERVICES[@]{{ '}' }}"; do
        systemctl enable "$service" >/dev/null 2>&1
    done
    
    log_success "All services started and enabled"
}

service_stop() {
    log_info "Stopping Energy AI services..."
    
    for service in "${{ '{' }}SERVICES[@]{{ '}' }}"; do
        log_info "Stopping $service..."
        if systemctl stop "$service"; then
            log_success "$service stopped"
        else
            log_warning "Failed to stop $service (may already be stopped)"
        fi
    done
    
    log_success "All services stopped"
}

service_restart() {
    log_info "Restarting Energy AI services..."
    
    service_stop
    sleep 3
    service_start
    
    log_success "All services restarted"
}

show_logs() {
    log_info "Showing recent logs from all Energy AI services..."
    echo
    
    for service in "${{ '{' }}SERVICES[@]{{ '}' }}"; do
        echo -e "${{ '{' }}YELLOW{{ '}' }}=== $service ===${{ '{' }}NC{{ '}' }}"
        journalctl -u "$service" --since "1 hour ago" --lines 10 --no-pager || true
        echo
    done
}

health_check() {
    log_info "Running health check..."
    echo
    
    # Check services
    local healthy_services=0
    for service in "${{ '{' }}SERVICES[@]{{ '}' }}"; do
        if systemctl is-active --quiet "$service"; then
            ((healthy_services++))
        fi
    done
    
    # Check system resources
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{{ '{' }}print $2{{ '}' }}' | cut -d'%' -f1)
    local memory_usage=$(free | grep Mem | awk '{{ '{' }}printf "%.1f", $3/$2 * 100.0{{ '}' }}')
    local disk_usage=$(df / | tail -1 | awk '{{ '{' }}print $5{{ '}' }}' | cut -d'%' -f1)
    
    # Check connectivity
    local mqtt_ok=false
    local influxdb_ok=false
    
    if nc -z "{{ mqtt_broker_host | default('localhost') }}" 1883 >/dev/null 2>&1; then
        mqtt_ok=true
    fi
    
    if curl -s "{{ influxdb_url | default('http://localhost:8086') }}/health" >/dev/null 2>&1; then
        influxdb_ok=true
    fi
    
    # Display results
    echo "🔧 Services: $healthy_services/${{ '{' }}#SERVICES[@]{{ '}' }} active"
    echo "💻 CPU Usage: ${{ '{' }}cpu_usage{{ '}' }}%"
    echo "💾 Memory Usage: ${{ '{' }}memory_usage{{ '}' }}%"
    echo "💿 Disk Usage: ${{ '{' }}disk_usage{{ '}' }}%"
    echo "📡 MQTT: $($mqtt_ok && echo "OK" || echo "KO")"
    echo "🗄️ InfluxDB: $($influxdb_ok && echo "OK" || echo "KO")"
    
    # Health score
    local score=100
    
    if [[ $healthy_services -lt ${{ '{' }}#SERVICES[@]{{ '}' }} ]]; then
        ((score -= 25))
    fi
    
    if (( $(echo "$cpu_usage > 80" | bc -l) )); then
        ((score -= 15))
    fi
    
    if (( $(echo "$memory_usage > 85" | bc -l) )); then
        ((score -= 15))
    fi
    
    if [[ $disk_usage -gt 90 ]]; then
        ((score -= 20))
    fi
    
    if ! $mqtt_ok; then
        ((score -= 15))
    fi
    
    if ! $influxdb_ok; then
        ((score -= 10))
    fi
    
    echo
    if [[ $score -ge 90 ]]; then
        log_success "Health Score: $score/100 (Excellent)"
    elif [[ $score -ge 75 ]]; then
        log_success "Health Score: $score/100 (Good)"
    elif [[ $score -ge 50 ]]; then
        log_warning "Health Score: $score/100 (Acceptable)"
    else
        log_error "Health Score: $score/100 (Poor)"
    fi
}

init_system() {
    log_info "Initializing Energy AI system..."
    
    if [[ -f "$ENERGY_AI_BASE/init_ai_system.py" ]]; then
        "$VENV_PATH/bin/python" "$ENERGY_AI_BASE/init_ai_system.py"
    else
        log_error "Initialization script not found"
        exit 1
    fi
}

train_models() {
    log_info "Training ML models..."
    
    if [[ -f "$ENERGY_AI_BASE/model_trainer.py" ]]; then
        "$VENV_PATH/bin/python" "$ENERGY_AI_BASE/model_trainer.py"
    else
        log_error "Model trainer script not found"
        exit 1
    fi
}

run_diagnostics() {
    log_info "Running system diagnostics..."
    
    if [[ -f "$ENERGY_AI_BASE/ai_diagnostics.py" ]]; then
        "$VENV_PATH/bin/python" "$ENERGY_AI_BASE/ai_diagnostics.py"
    else
        log_error "Diagnostics script not found"
        exit 1
    fi
}

performance_monitor() {
    log_info "Running performance monitor..."
    
    if [[ -f "$ENERGY_AI_BASE/performance_monitor.py" ]]; then
        "$VENV_PATH/bin/python" "$ENERGY_AI_BASE/performance_monitor.py"
    else
        log_error "Performance monitor script not found"
        exit 1
    fi
}

collect_data() {
    log_info "Collecting data..."
    
    if [[ -f "$ENERGY_AI_BASE/data_collector.py" ]]; then
        "$VENV_PATH/bin/python" "$ENERGY_AI_BASE/data_collector.py"
    else
        log_error "Data collector script not found"
        exit 1
    fi
}

backup_system() {
    log_info "Creating system backup..."
    
    local backup_dir="${LOG_PATH}/backups"
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_file="energy_ai_backup_${{ '{' }}timestamp{{ '}' }}.tar.gz"
    
    mkdir -p "$backup_dir"
    
    tar -czf "${{ '{' }}backup_dir{{ '}' }}/${{ '{' }}backup_file{{ '}' }}" \
        -C "$(dirname "$ENERGY_AI_BASE")" \
        "$(basename "$ENERGY_AI_BASE")" \
        --exclude="*.pyc" \
        --exclude="__pycache__" \
        --exclude="*.log"
    
    log_success "Backup created: ${{ '{' }}backup_dir{{ '}' }}/${{ '{' }}backup_file{{ '}' }}"
    
    # Keep only last 5 backups
    cd "$backup_dir" && ls -t energy_ai_backup_*.tar.gz | tail -n +6 | xargs -r rm
}

# Main
main() {
    show_header
    
    if [[ $# -eq 0 ]]; then
        show_usage
        exit 0
    fi
    
    check_prerequisites
    
    case "$1" in
        status)
            service_status
            ;;
        start)
            service_start
            ;;
        stop)
            service_stop
            ;;
        restart)
            service_restart
            ;;
        logs)
            show_logs
            ;;
        health)
            health_check
            ;;
        init)
            init_system
            ;;
        train)
            train_models
            ;;
        diagnose)
            run_diagnostics
            ;;
        monitor)
            performance_monitor
            ;;
        collect)
            collect_data
            ;;
        backup)
            backup_system
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            log_error "Unknown command: $1"
            echo
            show_usage
            exit 1
            ;;
    esac
}

main "$@"