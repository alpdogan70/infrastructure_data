#!/bin/bash
# Energy AI Diagnostics Script
# File: /usr/local/bin/diagnose_energy_ai
# Generated by Ansible - Energy Intelligence Role

set -euo pipefail

# Configuration
ENERGY_AI_BASE="{{ energy_ai_paths.base | default('/opt/energy-ai') }}"
VENV_PATH="{{ python_ai.venv_path | default('/opt/energy-ai/venv') }}"
LOG_PATH="{{ energy_ai_paths.logs | default('/opt/energy-ai/logs') }}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0
WARNING_CHECKS=0

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[PASS]${NC} $1"
    ((PASSED_CHECKS++))
}

log_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
    ((WARNING_CHECKS++))
}

log_error() {
    echo -e "${RED}[FAIL]${NC} $1"
    ((FAILED_CHECKS++))
}

check_count() {
    ((TOTAL_CHECKS++))
}

print_header() {
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║               🔍 ENERGY AI DIAGNOSTICS TOOL                  ║${NC}"
    echo -e "${CYAN}║                Version {{ energy_ai.version | default('1.0.0') }} - $(date '+%Y-%m-%d %H:%M:%S')                ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo
}

print_section() {
    echo -e "${BLUE}━━━ $1 ━━━${NC}"
}

check_prerequisites() {
    print_section "SYSTEM PREREQUISITES"
    
    # Check if running as root
    check_count
    if [[ $EUID -eq 0 ]]; then
        log_success "Running as root"
    else
        log_warning "Not running as root (some checks may fail)"
    fi
    
    # Check base directory
    check_count
    if [[ -d "$ENERGY_AI_BASE" ]]; then
        log_success "Energy AI base directory exists: $ENERGY_AI_BASE"
    else
        log_error "Energy AI base directory missing: $ENERGY_AI_BASE"
    fi
    
    # Check Python virtual environment
    check_count
    if [[ -d "$VENV_PATH" ]]; then
        log_success "Python virtual environment exists: $VENV_PATH"
    else
        log_error "Python virtual environment missing: $VENV_PATH"
    fi
    
    # Check Python executable
    check_count
    if [[ -x "$VENV_PATH/bin/python" ]]; then
        local python_version=$("$VENV_PATH/bin/python" --version 2>&1)
        log_success "Python executable found: $python_version"
    else
        log_error "Python executable not found or not executable"
    fi
    
    echo
}

check_services() {
    print_section "SYSTEMD SERVICES"
    
    local services=("energy-ai-predictor" "energy-scenarios" "weather-ml" "cost-optimizer")
    
    for service in "${services[@]}"; do
        check_count
        
        # Check if service exists
        if systemctl list-unit-files | grep -q "^$service.service"; then
            # Check if service is active
            if systemctl is-active --quiet "$service"; then
                local uptime=$(systemctl show "$service" --property=ActiveEnterTimestamp --value)
                log_success "$service: Active (started: $uptime)"
            else
                local status=$(systemctl is-active "$service")
                log_error "$service: $status"
                
                # Show last few log lines for failed service
                echo "    Last logs:"
                journalctl -u "$service" --lines 3 --no-pager 2>/dev/null | sed 's/^/    /' || true
            fi
        else
            log_error "$service: Service file not found"
        fi
    done
    
    echo
}

check_connectivity() {
    print_section "NETWORK CONNECTIVITY"
    
    # Check MQTT connectivity
    check_count
    if nc -z "{{ mqtt_broker_host | default('localhost') }}" 1883 >/dev/null 2>&1; then
        log_success "MQTT broker reachable: {{ mqtt_broker_host | default('localhost') }}:1883"
    else
        log_error "MQTT broker unreachable: {{ mqtt_broker_host | default('localhost') }}:1883"
    fi
    
    # Check InfluxDB connectivity
    check_count
    if curl -s "{{ influxdb_url | default('http://localhost:8086') }}/health" >/dev/null 2>&1; then
        log_success "InfluxDB reachable: {{ influxdb_url | default('http://localhost:8086') }}"
    else
        log_error "InfluxDB unreachable: {{ influxdb_url | default('http://localhost:8086') }}"
    fi
    
    # Check MQTT web interface
    check_count
    if curl -s "http://{{ mqtt_broker_host | default('localhost') }}:8080" >/dev/null 2>&1; then
        log_success "MQTT web interface reachable: {{ mqtt_broker_host | default('localhost') }}:8080"
    else
        log_warning "MQTT web interface unreachable: {{ mqtt_broker_host | default('localhost') }}:8080"
    fi
    
    echo
}

check_python_environment() {
    print_section "PYTHON ENVIRONMENT"
    
    if [[ ! -x "$VENV_PATH/bin/python" ]]; then
        log_error "Python environment not available for testing"
        return
    fi