#!/bin/bash
# Energy AI Monitoring Script
# File: /usr/local/bin/monitor_energy_ai
# Generated by Ansible - Energy Intelligence Role

set -euo pipefail

# Configuration
ENERGY_AI_BASE="{{ energy_ai_paths.base | default('/opt/energy-ai') }}"
VENV_PATH="{{ python_ai.venv_path | default('/opt/energy-ai/venv') }}"
LOG_PATH="{{ energy_ai_paths.logs | default('/opt/energy-ai/logs') }}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Functions
print_header() {
    clear
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║               🧠 ENERGY AI MONITORING DASHBOARD              ║${NC}"
    echo -e "${BLUE}║                Version {{ energy_ai.version | default('1.0.0') }} - $(date '+%Y-%m-%d %H:%M:%S')                ║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo
}

get_service_status() {
    local service="$1"
    if systemctl is-active --quiet "$service"; then
        echo -e "${GREEN}●${NC} Active"
    else
        echo -e "${RED}●${NC} Inactive"
    fi
}

get_service_memory() {
    local service="$1"
    local memory=$(systemctl show "$service" --property=MemoryCurrent --value 2>/dev/null || echo "0")
    if [[ "$memory" != "0" ]]; then
        echo "$((memory / 1024 / 1024))MB"
    else
        echo "N/A"
    fi
}

get_system_info() {
    # CPU Usage
    local cpu=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
    
    # Memory Usage
    local mem_info=$(free | grep Mem)
    local mem_total=$(echo $mem_info | awk '{print $2}')
    local mem_used=$(echo $mem_info | awk '{print $3}')
    local mem_percent=$(awk "BEGIN {printf \"%.1f\", $mem_used/$mem_total*100}")
    
    # Disk Usage
    local disk_info=$(df / | tail -1)
    local disk_used=$(echo $disk_info | awk '{print $5}' | cut -d'%' -f1)
    
    # Load Average
    local load=$(uptime | awk -F'load average:' '{print $2}' | cut -d',' -f1 | xargs)
    
    echo "$cpu|$mem_percent|$disk_used|$load"
}

get_mqtt_status() {
    if nc -z "{{ mqtt_broker_host | default('localhost') }}" 1883 >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Connected${NC}"
    else
        echo -e "${RED}✗ Disconnected${NC}"
    fi
}

get_influxdb_status() {
    if curl -s "{{ influxdb_url | default('http://localhost:8086') }}/health" >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Healthy${NC}"
    else
        echo -e "${RED}✗ Unhealthy${NC}"
    fi
}

get_recent_activity() {
    local service="$1"
    local count=$(journalctl -u "$service" --since "1 hour ago" --grep "✅" 2>/dev/null | wc -l)
    echo "$count"
}

show_dashboard() {
    print_header
    
    # Services Status
    echo -e "${CYAN}📊 SERVICES STATUS${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    printf "%-25s %-15s %-10s %-10s\n" "Service" "Status" "Memory" "Activity/1h"
    echo "──────────────────────────────────────────────────────────────────"
    
    local services=("energy-ai-predictor" "energy-scenarios" "weather-ml" "cost-optimizer")
    
    for service in "${services[@]}"; do
        local status=$(get_service_status "$service")
        local memory=$(get_service_memory "$service")
        local activity=$(get_recent_activity "$service")
        printf "%-25s %-25s %-10s %-10s\n" "$service" "$status" "$memory" "$activity"
    done
    
    echo
    
    # System Resources
    echo -e "${CYAN}💻 SYSTEM RESOURCES${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    local sys_info=$(get_system_info)
    local cpu=$(echo "$sys_info" | cut -d'|' -f1)
    local mem=$(echo "$sys_info" | cut -d'|' -f2)
    local disk=$(echo "$sys_info" | cut -d'|' -f3)
    local load=$(echo "$sys_info" | cut -d'|' -f4)
    
    printf "%-15s %-15s %-15s %-15s\n" "CPU Usage" "Memory Usage" "Disk Usage" "Load Average"
    printf "%-15s %-15s %-15s %-15s\n" "${cpu}%" "${mem}%" "${disk}%" "$load"
    
    echo
    
    # Connectivity
    echo -e "${CYAN}🌐 CONNECTIVITY${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    printf "%-20s %-20s\n" "MQTT Broker" "InfluxDB"
    printf "%-20s %-20s\n" "$(get_mqtt_status)" "$(get_influxdb_status)"
    
    echo
    
    # Recent Logs
    echo -e "${CYAN}📋 RECENT ACTIVITY${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    for service in "${services[@]}"; do
        local latest_log=$(journalctl -u "$service" --since "10 minutes ago" --lines 1 --no-pager 2>/dev/null | tail -1)
        if [[ -n "$latest_log" ]]; then
            local timestamp=$(echo "$latest_log" | awk '{print $1, $2, $3}')
            local message=$(echo "$latest_log" | cut -d' ' -f4-)
            echo -e "${YELLOW}$service${NC}: $message"
        fi
    done
    
    echo
    echo -e "${BLUE}Press Ctrl+C to exit, or any key to refresh...${NC}"
}

monitor_continuous() {
    while true; do
        show_dashboard
        
        # Wait for user input or timeout
        if read -t 5 -n 1; then
            continue
        fi
    done
}

monitor_once() {
    show_dashboard
}

show_detailed_logs() {
    echo -e "${CYAN}📋 DETAILED LOGS - Last 1 hour${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    local services=("energy-ai-predictor" "energy-scenarios" "weather-ml" "cost-optimizer")
    
    for service in "${services[@]}"; do
        echo -e "\n${YELLOW}=== $service ===${NC}"
        journalctl -u "$service" --since "1 hour ago" --lines 20 --no-pager || true
    done
}

show_performance_stats() {
    echo -e "${CYAN}📈 PERFORMANCE STATISTICS${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    if [[ -f "$ENERGY_AI_BASE/performance_monitor.py" ]]; then
        "$VENV_PATH/bin/python" "$ENERGY_AI_BASE/performance_monitor.py"
    else
        echo "Performance monitor script not found"
    fi
}

show_mqtt_traffic() {
    echo -e "${CYAN}📡 MQTT TRAFFIC MONITOR${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Monitoring MQTT topics for 30 seconds..."
    echo "Press Ctrl+C to stop"
    
    timeout 30 mosquitto_sub -h "{{ mqtt_broker_host | default('localhost') }}" -t "energy/ai/+/+" -u iot -P iot123 -v || true
}

show_usage() {
    echo "Usage: $0 [OPTION]"
    echo
    echo "Options:"
    echo "  -c, --continuous    Continuous monitoring (default)"
    echo "  -o, --once         Show dashboard once"
    echo "  -l, --logs         Show detailed logs"
    echo "  -p, --performance  Show performance statistics"
    echo "  -m, --mqtt         Monitor MQTT traffic"
    echo "  -h, --help         Show this help"
    echo
}

# Main
main() {
    case "${1:-continuous}" in
        -c|--continuous|continuous)
            trap 'echo -e "\n${BLUE}Monitoring stopped.${NC}"; exit 0' INT
            monitor_continuous
            ;;
        -o|--once|once)
            monitor_once
            ;;
        -l|--logs|logs)
            show_detailed_logs
            ;;
        -p|--performance|performance)
            show_performance_stats
            ;;
        -m|--mqtt|mqtt)
            show_mqtt_traffic
            ;;
        -h|--help|help)
            show_usage
            ;;
        *)
            echo "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
}

main "$@"