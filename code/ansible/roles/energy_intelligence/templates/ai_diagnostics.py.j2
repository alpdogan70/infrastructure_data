#!/usr/bin/env python3
"""
AI Diagnostics - Outil de diagnostic du syst√®me IA √©nerg√©tique
File: {{ energy_ai_paths.base | default('/opt/energy-ai') }}/ai_diagnostics.py
Generated by Ansible - Energy Intelligence Role
"""

import json
import subprocess
import sys
import os
from datetime import datetime
import requests

def check_services():
    """V√©rification des services systemd"""
    print("üîç V√©rification des services Energy AI")
    print("-" * 40)
    
    services = [
        "energy-ai-predictor",
        "energy-scenarios", 
        "weather-ml",
        "cost-optimizer"
    ]
    
    for service in services:
        try:
            result = subprocess.run(
                ["systemctl", "is-active", service],
                capture_output=True,
                text=True
            )
            
            status = result.stdout.strip()
            icon = "‚úÖ" if status == "active" else "‚ùå"
            print(f"{icon} {service}: {status}")
            
            if status != "active":
                # Obtenir plus d'infos sur l'erreur
                status_result = subprocess.run(
                    ["systemctl", "status", service, "--lines=3"],
                    capture_output=True,
                    text=True
                )
                print(f"    ‚îî‚îÄ {status_result.stdout.split('Active:')[1].split('\\n')[0].strip() if 'Active:' in status_result.stdout else 'Status inconnu'}")
                
        except Exception as e:
            print(f"‚ùå {service}: Erreur - {e}")

def check_connectivity():
    """V√©rification de la connectivit√©"""
    print("\\nüåê V√©rification de la connectivit√©")
    print("-" * 40)
    
    endpoints = [
        ("MQTT Broker", "{{ mqtt_broker_host | default('localhost') }}", 1883),
        ("InfluxDB", "{{ influxdb_host | default('localhost') }}", 8086),
        ("MQTT Web", "{{ mqtt_broker_host | default('localhost') }}", 8080)
    ]
    
    for name, host, port in endpoints:
        try:
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex((host, port))
            sock.close()
            
            if result == 0:
                print(f"‚úÖ {name} ({host}:{port}): Accessible")
            else:
                print(f"‚ùå {name} ({host}:{port}): Inaccessible")
                
        except Exception as e:
            print(f"‚ùå {name}: Erreur - {e}")

def check_python_environment():
    """V√©rification de l'environnement Python"""
    print("\\nüêç V√©rification environnement Python")
    print("-" * 40)
    
    venv_path = "{{ python_ai.venv_path | default('/opt/energy-ai/venv') }}"
    python_cmd = f"{venv_path}/bin/python"
    
    if os.path.exists(python_cmd):
        print(f"‚úÖ Environnement virtuel: {venv_path}")
        
        # Test des modules critiques
        modules = ["numpy", "pandas", "sklearn", "paho.mqtt.client", "influxdb_client"]
        
        for module in modules:
            try:
                result = subprocess.run(
                    [python_cmd, "-c", f"import {module}; print('OK')"],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                
                if result.returncode == 0:
                    print(f"‚úÖ Module {module}: Disponible")
                else:
                    print(f"‚ùå Module {module}: Erreur - {result.stderr.strip()}")
                    
            except Exception as e:
                print(f"‚ùå Module {module}: Exception - {e}")
    else:
        print(f"‚ùå Environnement virtuel non trouv√©: {venv_path}")

def check_logs():
    """V√©rification des logs r√©cents"""
    print("\\nüìã Analyse des logs r√©cents")
    print("-" * 40)
    
    services = ["energy-ai-predictor", "energy-scenarios", "weather-ml", "cost-optimizer"]
    
    for service in services:
        try:
            result = subprocess.run(
                ["journalctl", "-u", service, "--since", "1 hour ago", "--lines", "5"],
                capture_output=True,
                text=True
            )
            
            if result.stdout.strip():
                lines = result.stdout.strip().split('\\n')
                print(f"üìù {service} (derni√®res entr√©es):")
                for line in lines[-3:]:  # 3 derni√®res lignes
                    if line.strip():
                        print(f"    {line}")
            else:
                print(f"üìù {service}: Aucun log r√©cent")
                
        except Exception as e:
            print(f"‚ùå {service}: Erreur lecture logs - {e}")

def main():
    """Point d'entr√©e principal"""
    print("üß† DIAGNOSTICS ENERGY AI")
    print("=" * 50)
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üèóÔ∏è Version: {{ energy_ai.version | default('1.0.0') }}")
    
    check_services()
    check_connectivity()
    check_python_environment()
    check_logs()
    
    print("\\n" + "=" * 50)
    print("‚úÖ Diagnostic termin√©")
    print("üí° Pour plus de d√©tails: journalctl -u <service-name> -f")

if __name__ == "__main__":
    main()