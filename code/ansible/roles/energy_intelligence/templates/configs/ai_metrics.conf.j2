# AI Performance Metrics Configuration
# File: /etc/telegraf/telegraf.d/ai_metrics.conf
# Generated by Ansible - Energy Intelligence Role

# ================== AI SYSTEM METRICS ==================

# System metrics for AI processes
[[inputs.procstat]]
  pattern = "energy_predictor"
  pid_tag = true
  process_name = "energy-ai-predictor"
  
  [inputs.procstat.tags]
    component = "energy_ai"
    service = "predictor"

[[inputs.procstat]]
  pattern = "scenario_engine"
  pid_tag = true
  process_name = "energy-scenarios"
  
  [inputs.procstat.tags]
    component = "energy_ai"
    service = "scenarios"

[[inputs.procstat]]
  pattern = "weather_ml_model"
  pid_tag = true
  process_name = "weather-ml"
  
  [inputs.procstat.tags]
    component = "energy_ai"
    service = "weather_ml"

[[inputs.procstat]]
  pattern = "cost_optimizer"
  pid_tag = true
  process_name = "cost-optimizer"
  
  [inputs.procstat.tags]
    component = "energy_ai"
    service = "cost_optimizer"

# ================== CUSTOM AI METRICS ==================

# AI Service Health Check
[[inputs.exec]]
  commands = [
    "/usr/local/bin/diagnose_energy_ai --quick 2>/dev/null | grep 'Health Score' | awk '{print $3}' | cut -d'/' -f1"
  ]
  name_override = "ai_health_score"
  data_format = "value"
  data_type = "integer"
  timeout = "30s"
  interval = "5m"
  
  [inputs.exec.tags]
    source = "energy_ai"
    component = "health_monitor"

# AI Service Status
[[inputs.exec]]
  commands = [
    "systemctl is-active energy-ai-predictor",
    "systemctl is-active energy-scenarios", 
    "systemctl is-active weather-ml",
    "systemctl is-active cost-optimizer"
  ]
  name_override = "ai_service_status"
  data_format = "value"
  data_type = "string"
  timeout = "10s"
  interval = "1m"
  
  [inputs.exec.tags]
    source = "energy_ai"
    component = "service_monitor"

# AI Log Analysis
[[inputs.logparser]]
  files = ["{{ energy_ai_paths.logs | default('/opt/energy-ai/logs') }}/*.log"]
  from_beginning = false
  watch_method = "inotify"
  
  [inputs.logparser.grok]
    patterns = [
      '%{TIMESTAMP_ISO8601:timestamp} - %{WORD:logger} - %{WORD:level} - %{GREEDYDATA:message}'
    ]
    measurement = "ai_logs"
    
  [inputs.logparser.tags]
    source = "energy_ai"
    component = "log_monitor"

# ================== AI PERFORMANCE METRICS OUTPUT ==================

# Send AI metrics to dedicated bucket
[[outputs.influxdb_v2]]
  urls = ["{{ influxdb_url | default('http://localhost:8086') }}"]
  token = "{{ influxdb_token.content | b64decode | trim if influxdb_token is defined else 'demo-token' }}"
  organization = "{{ influxdb_org | default('iot') }}"
  bucket = "ai_performance"
  timeout = "5s"
  namepass = ["ai_health_score", "ai_service_status", "ai_logs", "procstat"]
  
  [outputs.influxdb_v2.tagpass]
    component = ["energy_ai", "health_monitor", "service_monitor", "log_monitor"]