# Configuration principale Energy AI
# File: {{ energy_ai_paths.configs | default('/opt/energy-ai/configs') }}/energy_ai_config.yaml
# Generated by Ansible - Energy Intelligence Role

version: "{{ energy_ai.version | default('1.0.0') }}"
environment: "{{ energy_ai.environment | default('production') }}"
deployment_date: "{{ ansible_date_time.iso8601 }}"

# Paths configuration
paths:
  base: "{{ energy_ai_paths.base | default('/opt/energy-ai') }}"
  models: "{{ energy_ai_paths.models | default('/opt/energy-ai/models') }}"
  data: "{{ energy_ai_paths.data | default('/opt/energy-ai/data') }}"
  logs: "{{ energy_ai_paths.logs | default('/opt/energy-ai/logs') }}"
  configs: "{{ energy_ai_paths.configs | default('/opt/energy-ai/configs') }}"
  scenarios: "{{ energy_ai_paths.scenarios | default('/opt/energy-ai/scenarios') }}"

# Python environment
python:
  version: "{{ python_ai.version | default('3') }}"
  venv_path: "{{ python_ai.venv_path | default('/opt/energy-ai/venv') }}"
  requirements_file: "{{ python_ai.requirements_file | default('requirements_ai.txt') }}"

# Services configuration
services:
  predictor:
    name: "energy-ai-predictor"
    enabled: true
    interval_minutes: 15
    description: "{{ energy_ai_services[0].description | default('Intelligence Énergétique - Prédicteur IA') }}"
    restart_policy: "{{ energy_ai_services[0].restart_policy | default('always') }}"
    
  scenarios:
    name: "energy-scenarios"
    enabled: true
    check_interval_seconds: 30
    description: "{{ energy_ai_services[1].description | default('Intelligence Énergétique - Moteur de Scénarios') }}"
    restart_policy: "{{ energy_ai_services[1].restart_policy | default('always') }}"
    
  weather_ml:
    name: "weather-ml"
    enabled: true
    update_interval_minutes: 15
    description: "{{ energy_ai_services[2].description | default('Intelligence Énergétique - ML Météo') }}"
    restart_policy: "{{ energy_ai_services[2].restart_policy | default('always') }}"
    
  cost_optimizer:
    name: "cost-optimizer"
    enabled: true
    optimization_interval_minutes: 10
    description: "{{ energy_ai_services[3].description | default('Intelligence Énergétique - Optimiseur de Coûts') }}"
    restart_policy: "{{ energy_ai_services[3].restart_policy | default('always') }}"

# MQTT configuration
mqtt:
  broker:
    host: "{{ mqtt_broker_host | default('localhost') }}"
    port: 1883
    username: "iot"
    password: "iot123"
    keepalive: 60
    
  topics:
    predictions: "{{ mqtt_ai.topics.predictions | default('energy/ai/predictions') }}"
    scenarios: "{{ mqtt_ai.topics.scenarios | default('energy/ai/scenarios') }}"
    recommendations: "{{ mqtt_ai.topics.recommendations | default('energy/ai/recommendations') }}"
    performance: "{{ mqtt_ai.topics.performance | default('energy/ai/performance') }}"
    weather_ml: "{{ mqtt_ai.topics.weather_ml | default('energy/ai/weather') }}"
    cost_optimization: "{{ mqtt_ai.topics.cost_optimization | default('energy/ai/costs') }}"
    
  publishing:
    qos: 1
    retain: false
    client_prefix: "energy_ai"

# InfluxDB configuration
influxdb:
  connection:
    url: "{{ influxdb_url | default('http://localhost:8086') }}"
    organization: "{{ influxdb_org | default('iot') }}"
    timeout: 5000
    
  buckets:
    energy_ai: "energy_ai"
    scenarios: "energy_scenarios"
    weather: "weather_ml"
    costs: "cost_optimization"
    carbon: "carbon_metrics"
    performance: "model_performance"
    
  retention_policies:
    short_term_days: 30
    medium_term_days: 90
    long_term_days: 365

# Machine Learning configuration
machine_learning:
  models:
    consumption:
      algorithm: "RandomForestRegressor"
      parameters:
        n_estimators: 100
        max_depth: 10
        random_state: 42
      retrain_interval_days: 7
      
    solar:
      algorithm: "RandomForestRegressor"
      parameters:
        n_estimators: 100
        max_depth: 10
        random_state: 42
      retrain_interval_days: 7
      
    battery:
      algorithm: "RandomForestRegressor"
      parameters:
        n_estimators: 100
        max_depth: 10
        random_state: 42
      retrain_interval_days: 7
      
  training:
    test_size: 0.2
    validation_threshold: 0.8
    auto_retrain: true
    backup_models: true

# Monitoring configuration
monitoring:
  metrics:
    system_resources: true
    service_health: true
    prediction_accuracy: true
    scenario_execution: true
    
  alerting:
    enabled: true
    channels: ["mqtt", "logs"]
    thresholds:
      cpu_percent: 80
      memory_percent: 85
      disk_percent: 90
      service_down_minutes: 5
      
  logging:
    level: "INFO"
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    rotate_size_mb: 50
    backup_count: 5

# External integrations
external_apis:
  weather:
    provider: "openweathermap"
    api_key: "{{ external_apis.weather.api_key | default('demo_key') }}"
    enabled: true
    fallback_to_demo: true
    
  electricity_market:
    provider: "rte_france"
    enabled: false
    
  carbon_intensity:
    provider: "co2signal"
    enabled: false

# Energy management targets
targets:
  energy:
    efficiency_improvement_percent: 15
    renewable_percentage: 80
    peak_reduction_percent: 20
    
  carbon:
    daily_limit_kg_co2: 50.0
    annual_reduction_percent: 15
    neutrality_target_year: 2030
    
  cost:
    monthly_savings_target_percent: 10
    arbitrage_efficiency_percent: 85

# Security configuration
security:
  encryption:
    enabled: true
    algorithm: "AES-256"
    
  access_control:
    api_authentication: true
    rate_limiting: true
    ip_whitelist: []
    
  data_privacy:
    anonymize_personal_data: true
    data_retention_policy: true
    gdpr_compliance: true

# Backup and recovery
backup:
  enabled: true
  schedule: "daily"
  retention_days: 30
  include_models: true
  include_data: true
  include_configs: true
  
recovery:
  auto_recovery: true
  health_check_interval_minutes: 5
  max_restart_attempts: 3