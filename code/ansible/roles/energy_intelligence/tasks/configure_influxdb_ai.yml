---
# Configuration InfluxDB pour IA √©nerg√©tique (utilise les buckets existants)
# File: ansible/roles/energy_intelligence/tasks/configure_influxdb_ai.yml

- name: "üîç V√©rification connectivit√© InfluxDB"
  uri:
    url: "http://{{ influxdb_host }}:8086/health"
    method: GET
    status_code: 200
  register: influxdb_health
  retries: 3
  delay: 5

- name: "üìã R√©cup√©ration ID organisation InfluxDB"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/orgs"
    method: GET
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
    status_code: 200
  register: influxdb_orgs
  when: influxdb_org_id is not defined

- name: "üéØ Extraction ID organisation"
  set_fact:
    influxdb_org_id: "{{ (influxdb_orgs.json.orgs | selectattr('name', 'equalto', influxdb_org) | first).id }}"
  when: influxdb_org_id is not defined

- name: "üìä V√©rification des buckets IA existants"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/buckets"
    method: GET
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
    status_code: 200
  register: existing_buckets

- name: "üîç Liste des buckets IA disponibles"
  set_fact:
    ai_buckets_available: "{{ existing_buckets.json.buckets | selectattr('name', 'match', '^(energy_ai|ai_predictions|energy_scenarios|model_performance|carbon_metrics|weather_ml|cost_optimization)$') | map(attribute='name') | list }}"

- name: "‚úÖ V√©rification des buckets IA essentiels"
  assert:
    that:
      - "'energy_ai' in ai_buckets_available"
      - "'ai_predictions' in ai_buckets_available"
      - "'energy_scenarios' in ai_buckets_available"
      - "'model_performance' in ai_buckets_available"
      - "'weather_ml' in ai_buckets_available"
      - "'cost_optimization' in ai_buckets_available"
    fail_msg: |
      ‚ùå Buckets IA essentiels manquants. Buckets trouv√©s: {{ ai_buckets_available }}
      Les buckets IA doivent √™tre cr√©√©s par le r√¥le influxdb_v2
    success_msg: "‚úÖ Buckets IA essentiels pr√©sents ({{ ai_buckets_available | length }}/7)"

- name: "‚ö†Ô∏è V√©rification bucket carbon_metrics (optionnel)"
  debug:
    msg: |
      {% if 'carbon_metrics' in ai_buckets_available %}
      ‚úÖ Bucket carbon_metrics: Pr√©sent
      {% else %}
      ‚ö†Ô∏è Bucket carbon_metrics: Manquant (sera cr√©√© automatiquement si n√©cessaire)
      {% endif %}

- name: "üîß Cr√©ation du bucket carbon_metrics si manquant"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/buckets"
    method: POST
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "carbon_metrics"
      orgID: "{{ influxdb_org_id }}"
      description: "Carbon footprint and sustainability metrics (365 days)"
      retentionRules:
        - type: "expire"
          everySeconds: 31536000  # 365 days
      rp: "autogen"
    status_code: [201, 422]  # 422 si bucket existe d√©j√†
  when: "'carbon_metrics' not in ai_buckets_available"
  register: carbon_bucket_creation
  ignore_errors: true

- name: "üìä Re-v√©rification des buckets apr√®s cr√©ation"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/buckets"
    method: GET
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
    status_code: 200
  register: updated_buckets
  when: carbon_bucket_creation is defined

- name: "üîç Mise √† jour de la liste des buckets IA"
  set_fact:
    ai_buckets_available: "{{ updated_buckets.json.buckets | selectattr('name', 'match', '^(energy_ai|ai_predictions|energy_scenarios|model_performance|carbon_metrics|weather_ml|cost_optimization)}"

- name: "‚öôÔ∏è Configuration datasource Grafana pour IA"
  uri:
    url: "http://{{ grafana_host | default('localhost') }}:3000/api/datasources"
    method: POST
    headers:
      Authorization: "Bearer {{ grafana_admin_token | default('admin') }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "InfluxDB_AI"
      type: "influxdb"
      url: "http://{{ influxdb_host }}:8086"
      access: "proxy"
      database: ""
      jsonData:
        version: "Flux"
        organization: "{{ influxdb_org }}"
        defaultBucket: "energy_ai"
        httpMode: "POST"
      secureJsonData:
        token: "{{ influxdb_token.content | b64decode | trim }}"
    status_code: [200, 409]  # 409 si datasource existe d√©j√†
  register: grafana_datasource
  ignore_errors: true

- name: "üß™ Test √©criture donn√©es IA dans InfluxDB"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/write?org={{ influxdb_org | urlencode }}&bucket=energy_ai&precision=s"
    method: POST
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
      Content-Type: "text/plain"
    body: |
      ai_deployment,source=ansible,component=test ai_status=1,deployment_version="{{ energy_ai.version }}",timestamp={{ ansible_date_time.epoch }}
    status_code: 204
  register: influxdb_write_test

- name: "üìä Test lecture donn√©es IA"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/query?org={{ influxdb_org | urlencode }}"
    method: POST
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
      Content-Type: "application/vnd.flux"
    body: |
      from(bucket: "energy_ai")
        |> range(start: -5m)
        |> filter(fn: (r) => r._measurement == "ai_deployment")
        |> last()
    status_code: 200
  register: influxdb_read_test

- name: "üîê Cr√©ation token InfluxDB sp√©cifique IA (optionnel)"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/authorizations"
    method: POST
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
      Content-Type: "application/json"
    body_format: json
    body:
      description: "Energy AI Token - {{ ansible_date_time.date }}"
      orgID: "{{ influxdb_org_id }}"
      permissions:
        - action: "read"
          resource:
            type: "buckets"
            orgID: "{{ influxdb_org_id }}"
        - action: "write"
          resource:
            type: "buckets"
            orgID: "{{ influxdb_org_id }}"
    status_code: [201, 422]
  register: ai_token_creation
  when: energy_ai.environment == "production"
  ignore_errors: true

- name: "üìã R√©sum√© configuration InfluxDB IA"
  debug:
    msg: |
      ‚úÖ Configuration InfluxDB IA termin√©e:
      
      üóÑÔ∏è Buckets IA disponibles ({{ ai_buckets_available | length }}/7):
      {% for bucket in ai_buckets_available | sort %}
      üìä {{ bucket }} - ‚úÖ Disponible
      {% endfor %}
      {% if carbon_bucket_creation is defined and carbon_bucket_creation.status == 201 %}
      
      üîß Bucket carbon_metrics cr√©√© automatiquement
      {% endif %}
      
      üîó Connectivit√©:
      üì° Sant√© InfluxDB: {{ 'OK' if influxdb_health.status == 200 else 'ERREUR' }}
      ‚úçÔ∏è Test √©criture: {{ 'R√âUSSI' if influxdb_write_test.status == 204 else '√âCHOU√â' }}
      üìñ Test lecture: {{ 'R√âUSSI' if influxdb_read_test.status == 200 else '√âCHOU√â' }}
      
      üéØ Datasource Grafana: {{ 'CONFIGUR√â' if grafana_datasource.status in [200, 409] else 'ERREUR' }}
      üè¢ Organisation: {{ influxdb_org }} ({{ influxdb_org_id[:8] }}...)
      
      üí° Note: Les buckets IA sont g√©r√©s par le r√¥le influxdb_v2) | map(attribute='name') | list }}"
  when: updated_buckets is defined

- name: "‚öôÔ∏è Configuration datasource Grafana pour IA"
  uri:
    url: "http://{{ grafana_host | default('localhost') }}:3000/api/datasources"
    method: POST
    headers:
      Authorization: "Bearer {{ grafana_admin_token | default('admin') }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "InfluxDB_AI"
      type: "influxdb"
      url: "http://{{ influxdb_host }}:8086"
      access: "proxy"
      database: ""
      jsonData:
        version: "Flux"
        organization: "{{ influxdb_org }}"
        defaultBucket: "energy_ai"
        httpMode: "POST"
      secureJsonData:
        token: "{{ influxdb_token.content | b64decode | trim }}"
    status_code: [200, 409]  # 409 si datasource existe d√©j√†
  register: grafana_datasource
  ignore_errors: true

- name: "üß™ Test √©criture donn√©es IA dans InfluxDB"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/write?org={{ influxdb_org | urlencode }}&bucket=energy_ai&precision=s"
    method: POST
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
      Content-Type: "text/plain"
    body: |
      ai_deployment,source=ansible,component=test ai_status=1,deployment_version="{{ energy_ai.version }}",timestamp={{ ansible_date_time.epoch }}
    status_code: 204
  register: influxdb_write_test

- name: "üìä Test lecture donn√©es IA"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/query?org={{ influxdb_org | urlencode }}"
    method: POST
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
      Content-Type: "application/vnd.flux"
    body: |
      from(bucket: "energy_ai")
        |> range(start: -5m)
        |> filter(fn: (r) => r._measurement == "ai_deployment")
        |> last()
    status_code: 200
  register: influxdb_read_test

- name: "üîê Cr√©ation token InfluxDB sp√©cifique IA (optionnel)"
  uri:
    url: "http://{{ influxdb_host }}:8086/api/v2/authorizations"
    method: POST
    headers:
      Authorization: "Token {{ influxdb_token.content | b64decode | trim }}"
      Content-Type: "application/json"
    body_format: json
    body:
      description: "Energy AI Token - {{ ansible_date_time.date }}"
      orgID: "{{ influxdb_org_id }}"
      permissions:
        - action: "read"
          resource:
            type: "buckets"
            orgID: "{{ influxdb_org_id }}"
        - action: "write"
          resource:
            type: "buckets"
            orgID: "{{ influxdb_org_id }}"
    status_code: [201, 422]
  register: ai_token_creation
  when: energy_ai.environment == "production"
  ignore_errors: true

- name: "üìã R√©sum√© configuration InfluxDB IA"
  debug:
    msg: |
      ‚úÖ Configuration InfluxDB IA termin√©e:
      
      üóÑÔ∏è Buckets IA disponibles ({{ ai_buckets_available | length }}/7):
      {% for bucket in ai_buckets_available %}
      üìä {{ bucket }} - ‚úÖ Disponible
      {% endfor %}
      
      üîó Connectivit√©:
      üì° Sant√© InfluxDB: {{ 'OK' if influxdb_health.status == 200 else 'ERREUR' }}
      ‚úçÔ∏è Test √©criture: {{ 'R√âUSSI' if influxdb_write_test.status == 204 else '√âCHOU√â' }}
      üìñ Test lecture: {{ 'R√âUSSI' if influxdb_read_test.status == 200 else '√âCHOU√â' }}
      
      üéØ Datasource Grafana: {{ 'CONFIGUR√â' if grafana_datasource.status in [200, 409] else 'ERREUR' }}
      üè¢ Organisation: {{ influxdb_org }} ({{ influxdb_org_id[:8] }}...)
      
      üí° Note: Les buckets IA sont cr√©√©s par le r√¥le influxdb_v2